/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         University of Copenhagen, Copenhagen, Denmark
*
* Component: Mask
*
* %I
*
* Written by: Erik Knudsen 
* Date: March  2014
* Version: 1.0
* Release: McXtrace 1.2
* Origin: DTU Physics
*
* A masking image object
*
* %D
* The Mask component takes an image as input either as an standard image file in png or pnm format, or as an ascii file (see below for format),
* and uses the image as a mask. For instance as a manner of measuring resolution for imaging applications.
* If the image is supplied as a png or pnm file, they interpretation of the pixels varies depending on the file. If the image is grayscale the pixel values are directly mapped
* to opacity (or transparency if invert is set) values in the range [0..1]. If the image has RGB channels the R channel is considered most significant, the B channel least significant.
* The resulting number, e.g. R*255^2 + G*255 + B, is then mapped to a real valued opacity.
* Additionally png images may have an alpha channel - which is then considered the least significant channel. Palette mapped pngs are as of yet _not_ supported.
* A regular ascii file may be supplied - in which case the file is like the one below
* #any initial line starting with a hash is silently ignored
* 0.0 1.0 0.0 1.0 0.0
* 0.5 0.0 0.5 0.0 0.5  
* 0.0 0.25 0.0 0.25 0.0
* 0.75 0.0 0.75 0.0 0.75
* 1.0 0.0 1.0 0.0 1.0
* 
* ...which defines a 5x5 mask with a kind of checkerboard pattern-  
* 
* N.b. If you want to use the png-option of the component you must have libpng installed _and_ link your compiled instrument file to it. Assuming libpng is installed you may do this
* by adding "-DUSE_PNG=1 -lpng" to 1) the MCXTRACE_CFLAGS environment variable or 2) to the compiler flags textbox in the GUI. Open File->Prefrences and edit the textbox. 
*
* %P
* Input parameters:
* xwidth (m) Width of the masking object
* yheight (m) Height of the masking object
* mask ( ) Name of file containing the masking image
* invert ( ) By default the values inferred from the masking image are interepreted as opacity (1 is fully blocking). If invert is nonzero this is inverted and the values are considered as transparency (1 is fully transmissive)
*
* (none)
*
* %E
*******************************************************************************/

DEFINE COMPONENT Complex_Mask
DEFINITION PARAMETERS ()
SETTING PARAMETERS (xwidth, yheight, string mask_r, string mask_i, invert=0)
OUTPUT PARAMETERS (prms)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 
SHARE
%{
  %include "read_table-lib"
  
%}

DECLARE
%{
  struct {
    t_Table table_r;
    t_Table table_i;
    int ny,nx;
    double xmin,ymin;
    double xmax,ymax;
    //enum {STD,PNG,PNM} format; 
  } prms;
  int filter_row;

%}


INITIALIZE
%{
  
  /*do some checks on input parameters*/
  if (invert){
    /*invert should be either 0 or one*/
    invert=1;
  }

  do{

    
   /*read the masking file*/ 
    int status;
    if ( (status=Table_Read(&(prms.table_r),mask_r,0))==-1){
      fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",mask_r,NAME_CURRENT_COMP);
      exit(-1);
    }
    if ( (status=Table_Read(&(prms.table_i),mask_i,0))==-1){
      fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",mask_i,NAME_CURRENT_COMP);
      exit(-1);
    }
  }while(0);/*this is to allow breaking out so .png and .pnm will take precedence*/
  

  /*set some image vals*/
  prms.xmax= xwidth/2.0;
  prms.xmin=-xwidth/2.0;
  prms.ymax= yheight/2.0;
  prms.ymin=-yheight/2.0;
  prms.nx=prms.table_r.columns;
  prms.ny=prms.table_r.rows;
  
/* Make sure the two masks have the same dimensions */ 
  if (prms.nx!=prms.table_i.columns || prms.ny!=prms.table_i.rows ){
      fprintf(stderr,"No, buddy. Real and Im masks must have the same dimensions");
      exit(-1);
  }
    
	
%}

TRACE
%{
  int i,j;
  double masking_r, masking_i;


  PROP_Z0;
  if (x>prms.xmin && x<prms.xmax && y>prms.ymin && y<prms.ymax){
    i = floor((x - prms.xmin)*prms.nx/(xwidth));
    j = prms.ny-floor((y - prms.ymin)*prms.ny/(yheight));
    if (invert){  
      masking_r=(1-Table_Index(prms.table_r,j,i));
      masking_i=(1-Table_Index(prms.table_i,j,i));	 
    }else{
      masking_r=Table_Index(prms.table_r,j,i);
      masking_i=Table_Index(prms.table_i,j,i);
    }
    
    p*=(1.0-masking_r);
    phi+=2*3.14159*(masking_i-1);
 
    SCATTER;
  }



%}

MCDISPLAY
%{
  /* A bit ugly; hard-coded dimensions. */
  magnify("");
  rectangle("xy",0,0,0,xwidth,yheight);
%}

END
